import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:path_provider/path_provider.dart';

class VisionService {
  final String apiKey = 'AIzaSyCqz04AI-I8k1HudRFto9EiotUs4v_4OKA'; // ‡πÉ‡∏™‡πà API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Google Vision API
  Future<String> detectText(File image) async {
    try {
      final base64Image = base64Encode(await image.readAsBytes());

      final Map<String, dynamic> requestBody = {
        "requests": [
          {
            "image": {"content": base64Image},
            "features": [
              {"type": "TEXT_DETECTION", "maxResults": 1}
            ]
          }
        ]
      };

      final url = Uri.parse(
          'https://vision.googleapis.com/v1/images:annotate?key=$apiKey');

      final response = await http
          .post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode(requestBody),
      )
          .timeout(const Duration(seconds: 10)); // ‡∏ï‡∏±‡πâ‡∏á Timeout 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

      if (response.statusCode == 200) {
        final Map<String, dynamic> responseData = jsonDecode(response.body);

        // üëâ ‡πÄ‡∏û‡∏¥‡πà‡∏° log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        print("üìú API Response: ${jsonEncode(responseData)}");

        if (responseData['responses'] == null || responseData['responses'].isEmpty) {
          throw Exception("API ‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ");
        }

        final detectedText = responseData['responses'][0]['textAnnotations']?[0]['description']?.toString() ?? '';

        return detectedText.isNotEmpty
            ? detectedText
            : "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏†‡∏≤‡∏û";
      } else {
        throw Exception(
            'Google Vision API Error (${response.statusCode}): ${response.body}');
      }
    } catch (error) {
      throw Exception("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: $error");
    }
  }

  /// ‡∏•‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ API ‡∏ö‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå Node.js
  Future<File> removeBackground(File image) async {
    try {
      print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ${image.path}");

      var request = http.MultipartRequest(
        'POST',
        Uri.parse('http://10.0.0.85:3000/remove-bg'),
      );

      request.files.add(await http.MultipartFile.fromPath('image', image.path));

      var response = await request.send().timeout(const Duration(seconds: 30));

      print("‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ${response.statusCode}");

      if (response.statusCode == 200) {
        var tempDir = await getTemporaryDirectory();
        File newFile = File('${tempDir.path}/no_bg.png');
        var imageBytes = await response.stream.toBytes();
        await newFile.writeAsBytes(imageBytes);

        print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß: ${newFile.path}");
        return newFile;
      } else {
        throw Exception("Background removal failed: ${response.statusCode}");
      }
    } catch (error) {
      print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á: $error");
      throw Exception("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $error");
    }
  }
}
