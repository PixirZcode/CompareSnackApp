import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'showModalSheet.dart';
import 'package:project/main_tabview/main_tabview.dart';
import 'package:project/ocr/google_ocr.dart';
import 'package:url_launcher/url_launcher.dart';
import 'dart:convert';
import 'package:redis/redis.dart';
import 'package:string_similarity/string_similarity.dart';

class Search_Product extends StatefulWidget {
  const Search_Product({super.key});

  @override
  State<Search_Product> createState() => _Search_ProductState();
}

class _Search_ProductState extends State<Search_Product> {

  final TextEditingController _searchController = TextEditingController();
  List<Map<String, dynamic>> products = []; // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  List<Map<String, dynamic>> filteredProducts = []; // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
  Set<String> bookmarkedProductIds = {}; // Set ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏∏‡πä‡∏Å‡∏°‡∏≤‡∏£‡πå‡∏Å
  String resultMessage = ''; // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  String selectedShop = '‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤'; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Dropdown
  String selectedCategory = '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  String selectedValue = '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤'; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤
  String selectedPrice = '‡∏£‡∏≤‡∏Ñ‡∏≤'; // ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏£‡∏≤‡∏Ñ‡∏≤"
  bool isExpanded = false; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà
  bool isLoading = false;
  RedisConnection redisConnection = RedisConnection();
  Command? redisClient;

  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î Products ‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á 2 ‡πÅ‡∏´‡∏•‡πà‡∏á
  @override
  void initState() {
    super.initState();
    initRedis().then((_) {
      fetchBookmarks().then((_) {
      });
    });
  }

  Future<void> initRedis() async {
    try {
      // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Redis server (‡πÄ‡∏ä‡πà‡∏ô‡∏ó‡∏µ‡πà localhost:6379)
      redisClient = await redisConnection.connect('10.0.0.85', 6379);
      print("‚úî ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Redis ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } catch (e) {
      print("‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Redis: $e");
    }
  }

  Future<void> fetchProducts(String query) async {
    if (redisClient == null) {
      print("‚ùå ERROR: redisClient ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠");
      return;
    }

    String userEmail = FirebaseAuth.instance.currentUser?.email ?? '';
    if (userEmail.isEmpty) return;

    try {
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Redis ‡∏Å‡πà‡∏≠‡∏ô
      final redisBigc = await redisClient!.get('product:bigc');
      final redisLotus = await redisClient!.get('product:lotus');

      List<Map<String, dynamic>> fetchedProducts = [];
      int bigcCount = 0;
      int lotusCount = 0;

      // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö query ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      bool isQueryMatch(Map<String, dynamic> product, String query) {
        String title = product['title']?.toLowerCase() ?? '';
        double similarity = StringSimilarity.compareTwoStrings(title, query.toLowerCase());
        return title.contains(query.toLowerCase()) || similarity > 0.3; // ‡∏ï‡∏±‡πâ‡∏á threshold ‡∏ó‡∏µ‡πà 0.3
      }

      Future<void> searchInList(List<dynamic> productList, String shopName) async {
        for (var product in productList) {
          if (product is Map<String, dynamic>) {
            if ((shopName == "BigC" && bigcCount < 30) || (shopName == "Lotus" && lotusCount < 30)) {
              if (isQueryMatch(product, query)) {
                fetchedProducts.add({...product, 'shop': shopName});
                if (shopName == "BigC") {
                  bigcCount++;
                } else {
                  lotusCount++;
                }
              }
            }
          }
        }
      }

      if (redisBigc != null || redisLotus != null) {
        print("‚úî ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Redis");

        if (redisBigc != null) {
          await searchInList(jsonDecode(redisBigc) as List<dynamic>, "BigC");
        }
        if (redisLotus != null) {
          await searchInList(jsonDecode(redisLotus) as List<dynamic>, "Lotus");
        }
      }

      // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô Redis ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Firestore
      if (fetchedProducts.isEmpty) {
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Redis, ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô Firestore");

        final querySnapshot = await FirebaseFirestore.instance.collection('listproduct').get();
        print("‚úî ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${querySnapshot.docs.length}");

        if (querySnapshot.docs.isNotEmpty) {
          for (var doc in querySnapshot.docs) {
            final data = doc.data();
            if (data.containsKey('bigc')) {
              await searchInList(data['bigc'] as List<dynamic>, "BigC");
            }
            if (data.containsKey('lotus')) {
              await searchInList(data['lotus'] as List<dynamic>, "Lotus");
            }

            if (bigcCount >= 30 && lotusCount >= 30) break;
          }

          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Redis ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
          await redisClient!.set('product:bigc', jsonEncode(fetchedProducts.where((p) => p['shop'] == 'BigC').toList()));
          await redisClient!.set('product:lotus', jsonEncode(fetchedProducts.where((p) => p['shop'] == 'Lotus').toList()));
        }
      }

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ö‡∏∏‡πä‡∏Å‡∏°‡∏≤‡∏£‡πå‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      for (var product in fetchedProducts) {
        product['isBookmarked'] = bookmarkedProductIds.contains(product['url']);
      }

      setState(() {
        products = fetchedProducts;
        filteredProducts = fetchedProducts;
      });

      if (fetchedProducts.isEmpty) {
        resultMessage = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö '$query'";
      } else {
        resultMessage = "‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${fetchedProducts.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '$query'";
      }

      print("‚úî ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤: $fetchedProducts");
    } catch (e) {
      print("‚ùå ERROR: $e");
    }
  }

  // ‡πÄ‡∏ã‡∏ü‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  Future<void> saveSearchHistory(String query) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null || user.email == null) return;

    final String userEmail = user.email!;
    final historyRef = FirebaseFirestore.instance
        .collection('users')
        .doc(userEmail)
        .collection('search_history');

    final batch = FirebaseFirestore.instance.batch();

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    final querySnapshot = await historyRef.where('query', isEqualTo: query).get();

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    for (var doc in querySnapshot.docs) {
      batch.delete(doc.reference);
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    final newDocRef = historyRef.doc(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á document ‡πÉ‡∏´‡∏°‡πà
    batch.set(newDocRef, {
      'query': query,
      'timestamp': FieldValue.serverTimestamp(),
    });

    // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô batch
    await batch.commit();
  }

  // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  Future<List<String>> getSearchHistory() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null || user.email == null) return [];

    final String userEmail = user.email!;
    final historyRef = FirebaseFirestore.instance
        .collection('users')
        .doc(userEmail)
        .collection('search_history')
        .orderBy('timestamp', descending: true)
        .limit(5);

    final snapshot = await historyRef.get();
    return snapshot.docs.map((doc) => doc['query'] as String).toList();
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  void filterAndSortProducts(String shop, String category, String value, String price) {
    print("üîç Filtering with: shop=$shop, category=$category, value=$value, price=$price");

    List<Map<String, dynamic>> tempProducts = products.where((product) {
      bool matchesShop = (shop == '‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤') || (product['shop'] == shop);
      bool matchesCategory = (category == '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà') ||
          (category == '‡∏ä‡∏¥‡πâ‡∏ô' && product['unit'] != '‡πÅ‡∏û‡πá‡∏Ñ') ||
          (category == '‡πÅ‡∏û‡πá‡∏Ñ' && product['unit'] == '‡πÅ‡∏û‡πá‡∏Ñ');

      return matchesShop && matchesCategory;
    }).toList();

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° value ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (value == '‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å') {
      tempProducts.sort((a, b) =>
          (double.tryParse(a['value'].toString()) ?? 0.0)
              .compareTo(double.tryParse(b['value'].toString()) ?? 0.0));
    } else if (value == '‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢') {
      tempProducts.sort((a, b) =>
          (double.tryParse(b['value'].toString()) ?? 0.0)
              .compareTo(double.tryParse(a['value'].toString()) ?? 0.0));
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (price == '‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å') {
      tempProducts.sort((a, b) => a['price'].compareTo(b['price']));
    } else if (price == '‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢') {
      tempProducts.sort((a, b) => b['price'].compareTo(a['price']));
    }

    setState(() {
      filteredProducts = tempProducts;
    });
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡πä‡∏Å‡∏°‡∏≤‡∏£‡πå‡∏Å
  Future<void> fetchBookmarks() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    final bookmarksRef = FirebaseFirestore.instance.collection('users').doc(user.email).collection('bookmarks');
    final snapshot = await bookmarksRef.get();

    setState(() {
      bookmarkedProductIds = snapshot.docs.map((doc) => doc['url'] as String).toSet();
    });
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡πÉ‡∏ô‡∏ö‡∏∏‡πä‡∏Å‡∏°‡∏≤‡∏£‡πå‡∏Å
  Future<void> addToBookmarks(Map<String, dynamic> data) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null || user.uid.isEmpty) {
      print('‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
      return;
    }

    final _firestore = FirebaseFirestore.instance;
    final bookmarksRef = _firestore.collection('users').doc(user.email).collection('bookmarks');

    try {
      await bookmarksRef.add({
        'title': data['title'],
        'url': data['url'],
        'image': data['image'],
        'price': data['price'],
        'unit': data['unit'],
        'stockStatus': data['stockStatus'],
        'value': data['value'],
        'shop': data['shop'],
      });

      setState(() {
        data['isBookmarked'] = true;
        bookmarkedProductIds.add(data['url']);
      });

      print('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏∏‡πä‡∏Å‡∏°‡∏≤‡∏£‡πå‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } catch (e) {
      print('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏∏‡πä‡∏Å‡∏°‡∏≤‡∏£‡πå‡∏Å: $e');
    }
  }

  // ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ö‡∏∏‡πä‡∏Å‡∏°‡∏≤‡∏£‡πå‡∏Å
  Future<void> removeFromBookmarks(Map<String, dynamic> data) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null || user.uid.isEmpty) {
      print('‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
      return;
    }

    final _firestore = FirebaseFirestore.instance;
    final bookmarksRef = _firestore.collection('users').doc(user.email).collection('bookmarks');

    try {
      final querySnapshot = await bookmarksRef.where('url', isEqualTo: data['url']).get();
      for (var doc in querySnapshot.docs) {
        await doc.reference.delete();
      }

      setState(() {
        data['isBookmarked'] = false;
        bookmarkedProductIds.remove(data['url']);
      });

      print('‡∏•‡∏ö‡∏ö‡∏∏‡πä‡∏Å‡∏°‡∏≤‡∏£‡πå‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } catch (e) {
      print('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏∏‡πä‡∏Å‡∏°‡∏≤‡∏£‡πå‡∏Å: $e');
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î URL ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  Future<void> openUrlAndSaveOrder(Map<String, dynamic> data) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) {
      print('User = null');
      return;
    }

    final firestore = FirebaseFirestore.instance;

    try {
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô collection 'historys'

      await firestore
          .collection('users')
          .doc(user.email)
          .collection('historys')
          .add({
        'title': data['title'],
        'url': data['url'],
        'image': data['image'], // ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Redis ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô image ‡πÅ‡∏ï‡πà history ‡πÉ‡∏ô firestore ‡πÄ‡∏õ‡πá‡∏ô urlImage ‡πÄ‡∏•‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏ô‡πÉ‡∏î‡∏≠‡∏±‡∏ô‡∏ô‡∏∂‡∏á
        'price': data['price'],
        'unit': data['unit'],
        'stockStatus': data['stockStatus'],
        'value': data['value'],
        'shop': data['shop'],
        'timestamp': FieldValue.serverTimestamp(),
      });

      // ‡πÄ‡∏õ‡∏¥‡∏î URL ‡πÉ‡∏ô Browser
      final Uri uri = Uri.parse(data['url']);
      if (await canLaunchUrl(uri)) {
        await launchUrl(uri, mode: LaunchMode.externalApplication);
      } else {
        throw '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î URL ‡πÑ‡∏î‡πâ';
      }
    } catch (e) {
      print('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î URL: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
      title: Text("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"),
        leading: IconButton(
          icon: Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => MainTabView()),
            );
          },
        ),
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: Column(
              children: [
                Row(
                  children: [
                    Expanded(
                      child: Container(
                        padding: EdgeInsets.all(5),
                        height: 50,
                        width: MediaQuery.of(context).size.width / 1.5,
                        decoration: BoxDecoration(
                          color: Colors.black12.withOpacity(0.05),
                          borderRadius: BorderRadius.circular(10),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.black12.withOpacity(0.05),
                              blurRadius: 2,
                              spreadRadius: 1,
                            ),
                          ],
                        ),

                        child: TextField(
                          controller: _searchController,
                          decoration: InputDecoration(
                            labelText: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
                            suffixIcon: ElevatedButton(
                              style: ElevatedButton.styleFrom(// ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á Container
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(10), // ‡∏Ç‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô
                                ),
                                backgroundColor: Colors.white.withOpacity(0.7), // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∂‡∏ö‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                              ),
                              onPressed: () {
                                final query = _searchController.text.trim();
                                if (query.isNotEmpty) {
                                  saveSearchHistory(query); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                                  fetchProducts(query);
                                }
                              },
                              child: const Text(
                                '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤',
                                style: TextStyle(color: Colors.black), // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 35),
                    Container(
                      height: 50,
                      width: MediaQuery.of(context).size.width / 6,
                      decoration: BoxDecoration(
                          color: Colors.black12.withOpacity(0.05),
                          borderRadius: BorderRadius.circular(10),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.black12.withOpacity(0.05),
                              blurRadius: 2,
                              spreadRadius: 1,
                            )
                          ]),
                      child: GestureDetector(
                        onTap: () {
                          // ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
                          Navigator.push(
                            context,
                            MaterialPageRoute(builder: (context) => TextDetectionScreen()),
                          );
                        },
                        child: Center(
                          child: Icon(Icons.camera_alt_outlined),
                        ),
                      ),
                    ),
                  ],
                ),
                FutureBuilder<List<String>>(
                  future: getSearchHistory(),
                  builder: (context, snapshot) {
                    if (!snapshot.hasData || snapshot.data!.isEmpty) {
                      return const SizedBox(); // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
                    }
                    final history = snapshot.data!;
                    final displayedHistory = isExpanded ? history : history.take(3).toList();
                    return Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        const Padding(
                          padding: EdgeInsets.only(top: 4.0),
                          child: Text('‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:', style: TextStyle(fontSize: 12, fontWeight: FontWeight.bold)),
                        ),
                        Wrap(
                          spacing: 6,
                          children: displayedHistory.map((query) {
                            return GestureDetector(
                              onTap: () {
                                _searchController.text = query;
                                fetchProducts(query);
                              },
                              child: Chip(
                                label: Text(
                                  query,
                                  style: TextStyle(fontSize: 12), // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                                ),
                                deleteIcon: const Icon(Icons.close),
                                visualDensity: VisualDensity.compact, // ‡∏•‡∏î padding ‡πÉ‡∏ô Chip
                                onDeleted: () async {
                                  final user = FirebaseAuth.instance.currentUser;
                                  if (user != null) {
                                    final userEmail = user.email!.toLowerCase(); // ‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏õ‡πá‡∏ô key
                                    final historyRef = FirebaseFirestore.instance
                                        .collection('users')
                                        .doc(userEmail)
                                        .collection('search_history');

                                    final querySnapshot = await historyRef
                                        .where('query', isEqualTo: query)
                                        .get();

                                    for (var doc in querySnapshot.docs) {
                                      await doc.reference.delete(); // ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
                                    }
                                    setState(() {});
                                  }
                                },
                              ),
                            );
                          }).toList(),
                          ),
                          // ‡∏õ‡∏∏‡πà‡∏° "More" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà(‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Recent Search)
                          if (history.length > 3)
                              TextButton(
                                onPressed: () {
                                setState(() {
                                  isExpanded = !isExpanded; // ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á isExpanded
                                });
                              },
                                child: Text(isExpanded ? '‡πÅ‡∏™‡∏î‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á' : '‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°'), // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                          ),
                      ],
                    );
                  },
                ),
                if (resultMessage.isNotEmpty)
                  Padding(
                    padding: const EdgeInsets.only(top: 2.0),
                    child: Text(
                      resultMessage,
                      style: const TextStyle(
                        fontSize: 14,
                        fontStyle: FontStyle.italic,
                        color: Colors.grey,
                      ),
                    ),
                  ),

                // ‡∏™‡πà‡∏ß‡∏ô Dropdown
                SizedBox(
                  height: 50,
                  child: Row(
                    children: [
                      // Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                      Spacer(),
                      DropdownButton<String>(
                        value: selectedShop,
                        items: [
                          DropdownMenuItem(value: '‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤', child: Text('‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤')),
                          DropdownMenuItem(value: 'BigC', child: Text('BigC')),
                          DropdownMenuItem(value: 'Lotus', child: Text('Lotus')),
                        ],
                        onChanged: (value) {
                          setState(() {
                            selectedShop = value ?? '‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤';
                          });
                          filterAndSortProducts(selectedShop, selectedCategory, selectedValue, selectedPrice); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á
                        },
                      ),
                      Spacer(),
                      // Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡∏ä‡∏¥‡πâ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡πÅ‡∏û‡πá‡∏Ñ)
                      DropdownButton<String>(
                        value: selectedCategory,
                        items: [
                          DropdownMenuItem(value: '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', child: Text('‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà')),
                          DropdownMenuItem(value: '‡∏ä‡∏¥‡πâ‡∏ô', child: Text('‡∏ä‡∏¥‡πâ‡∏ô')),
                          DropdownMenuItem(value: '‡πÅ‡∏û‡πá‡∏Ñ', child: Text('‡πÅ‡∏û‡πá‡∏Ñ')),
                        ],
                        onChanged: (value) {
                          setState(() {
                            selectedCategory = value ?? '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà';
                          });
                          filterAndSortProducts(selectedShop, selectedCategory, selectedValue, selectedPrice); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á
                        },
                      ),
                      Spacer(),
                      // Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤
                      DropdownButton<String>(
                        value: selectedValue,
                        items: [
                          DropdownMenuItem(value: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤', child: Text('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤')),
                          DropdownMenuItem(value: '‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å', child: Text('‡∏ï‡πà‡∏≥‡πÑ‡∏õ‡∏™‡∏π‡∏á‚ñ≤')),
                          DropdownMenuItem(value: '‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢', child: Text('‡∏™‡∏π‡∏á‡πÑ‡∏õ‡∏ï‡πà‡∏≥‚ñº')),
                        ],
                        onChanged: (value) {
                          setState(() {
                            selectedValue = value ?? '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤';
                          });
                          filterAndSortProducts(selectedShop, selectedCategory, selectedValue, selectedPrice); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á
                        },
                      ),
                      Spacer(),
                      DropdownButton<String>(
                        value: selectedPrice,
                        items: [
                          DropdownMenuItem(value: '‡∏£‡∏≤‡∏Ñ‡∏≤', child: Text('‡∏£‡∏≤‡∏Ñ‡∏≤')),
                          DropdownMenuItem(value: '‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å', child: Text('‡∏ï‡πà‡∏≥‡πÑ‡∏õ‡∏™‡∏π‡∏á‚ñ≤')),
                          DropdownMenuItem(value: '‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢', child: Text('‡∏™‡∏π‡∏á‡πÑ‡∏õ‡∏ï‡πà‡∏≥‚ñº')),
                        ],
                        onChanged: (value) {
                          setState(() {
                            selectedPrice = value ?? '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤';
                          });
                          filterAndSortProducts(selectedShop, selectedCategory, selectedValue, selectedPrice); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á
                        },
                      ),
                      Spacer(),
                    ],
                  ),
                ),
              ],
            ),
          ),
          if (isLoading)
            const CircularProgressIndicator()
          else if (products.isEmpty)
            const Expanded(
              child: Center(
                child: Text(
                  '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤\n‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ !!',
                  style: TextStyle(
                    fontSize: 22, // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                    fontWeight: FontWeight.bold, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏ô‡∏ï‡πå (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
                  ),
                ),
              ),
            )
          else
            Expanded(
              child: ListView.builder(
                padding: const EdgeInsets.all(8),
                itemCount: filteredProducts.length,
                itemBuilder: (context, index) {
                  final data = filteredProducts[index];
                  print("üîç Debug data: $data"); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
                  bool isOutOfStock = data['stockStatus'] != 'Y' && data['stockStatus'] != 'IN_STOCK';

                  return Card(
                    elevation: 3,
                    color: isOutOfStock ? Colors.grey[300] : null,
                    child: Stack(
                      children: [
                        // Product details
                        Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: ListTile(
                            leading: data['image'] != null
                                ? Image.network(
                              data['image'],
                              height: 60,
                              width: 60,
                              fit: BoxFit.cover,
                              errorBuilder: (context, error, stackTrace) {
                                return const Icon(Icons.broken_image);
                              },
                            )
                                : const Icon(Icons.broken_image),
                            title: Text(
                              data['title'],
                              maxLines: 2,
                              overflow: TextOverflow.ellipsis,
                            ),
                            subtitle: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "‡∏£‡∏≤‡∏Ñ‡∏≤: ${data['price']} ‡∏ö‡∏≤‡∏ó",
                                  style: TextStyle(
                                    color: Colors.green,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                Text(
                                  "‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤: ${data['shop']}",
                                  style: const TextStyle(
                                    color: Colors.grey,
                                    fontStyle: FontStyle.italic,
                                    fontSize: 12,
                                  ),
                                ),

                                // ‡πÅ‡∏™‡∏î‡∏á value ‡πÅ‡∏•‡∏∞ result ‡πÉ‡∏ï‡πâ category
                                Builder(
                                  builder: (context) {
                                    return Column(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: [
                                        Text(
                                          '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤: ${data['value']} ‡∏Å‡∏£‡∏±‡∏°/‡∏ö‡∏≤‡∏ó',
                                          style: TextStyle(
                                            color: Colors.deepOrangeAccent,
                                            fontSize: 12,
                                          ),
                                        ),
                                      ],
                                    );
                                  },
                                ),
                                InkWell(
                                  onTap: () => openUrlAndSaveOrder(data),
                                  child: const Text(
                                    '‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á',
                                    style: TextStyle(
                                      color: Colors.blue,
                                      decoration: TextDecoration.underline,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                            trailing: IconButton(
                              icon: Icon(
                                data['isBookmarked']
                                    ? Icons.favorite
                                    : Icons.favorite_border,
                              ),
                              color: data['isBookmarked'] ? Colors.pink : Colors.black,
                              iconSize: 25, // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Icon
                              onPressed: () {
                                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡∏ö‡∏∏‡πä‡∏Å‡∏°‡∏≤‡∏£‡πå‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
                                if (data['isBookmarked']) {
                                  removeFromBookmarks(data);
                                } else {
                                  addToBookmarks(data);
                                }
                              },
                            ),
                          ),
                        ),

                        Positioned(
                          right: 22,
                          bottom: 8,
                          child: TextButton(
                            onPressed: () =>
                              showComparisonSheet(context, data['title']),
                            style: TextButton.styleFrom(
                              backgroundColor: Colors.blue,  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                              padding: EdgeInsets.symmetric(horizontal: 1),  // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏°
                            ),
                            child: Text(
                              '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö',  // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏õ‡∏∏‡πà‡∏°
                              style: TextStyle(
                                color: Colors.white,  // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                                fontSize: 12,  // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                              ),
                            ),
                          ),
                        ),

                        // ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ out of stock
                        if (isOutOfStock)
                          Positioned.fill(
                            child: Align(
                              alignment: Alignment.center,
                              child: Image.asset(
                                'assets/img/logo_outofstock.png',
                                height: 400,
                                width: 300,
                                fit: BoxFit.fill,
                              ),
                            ),
                          ),
                      ],
                    ),
                  );
                },
              ),
            )
        ],
      ),
    );
  }
}
